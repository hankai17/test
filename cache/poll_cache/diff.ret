3c3,4
< #include "cmn_conf.h"
---
> 
> 
8c9,11
< void http_handler(u_char *user, const struct pcap_pkthdr *h, const u_char *bytes)
---
> 
> 
> void http_handler(u_char *user, const struct pcap_pkthdr *h,const u_char *bytes)
10c13
<     char *pszDevName = (char *) user;
---
> 
15c18,19
<     short i = 0;
---
> 
>     short i  = 0;
19,22c23,27
<     char errbuf[BUFFER] = { 0 };
<     char http_host[100] = { 0 };
<     char request_line[BUFFER] = { 0 };
<     char request_line_temp[BUFFER] = { 0 };
---
>     char errbuf[BUFFER]= {0};
>     char white_host[100]= {0};
>     char http_host[100]={0};
>     char request_line[4096]={0};
>     int add_dir_host = 0;
24,27c29,34
<     char send_message[BUFFER] = { 0 };
<     char request[BUFFER] = { 0 };
<     char cache_ip[100] = { 0 };
<     char file_name[100] = { 0 };
---
>     char send_message[BUFFER] = {0}; 
>     char request[BUFFER] = {0};
>     char cache_ip[100] ={0};
>     char whether_send = 0;
>     char url[BUFFER] = {0};
>     char file_name[100] = {0};
30c37,38
<     char sys_time[40] = { 0 };
---
> 
>     char sys_time[40] ={0};
32c40
<     char s_ip_buf[20] = { 0 };
---
>     char s_ip_buf[20] = {0};
34,36c42,48
<     eth = (struct sniff_ethernet *) (bytes);
<     ip = (struct sniff_ip *) (bytes + ETHER_HEAD);
<     tcp = (struct sniff_tcp *) (bytes + ETHER_HEAD + sizeof(struct sniff_ip));
---
> 
> 
> 
> 
>     eth = (struct sniff_ethernet *)(bytes);
>     ip =  (struct sniff_ip *)(bytes + ETHER_HEAD);
>     tcp = (struct sniff_tcp *)(bytes + ETHER_HEAD + sizeof(struct sniff_ip));
40c52
< #if 0
---
>     #if 0
42,43c54,55
<     printf("the src eth is %x,%x,%x,%x,%x,%x\n",eth->ether_shost[0],eth->ether_shost[1],eth->ether_shost[2],eth->ether_shost[3],
<             eth->ether_shost[4],eth->ether_shost[5]);
---
>     printf("the src eth is %x,%x,%x,%x,%x,%x\n",eth->ether_shost[0],eth->ether_shost[1],eth->ether_shost[2],eth->ether_shost[3],\
>     eth->ether_shost[4],eth->ether_shost[5]);
51c63
< #endif
---
>     #endif
53d64
<     //src_ip_white and src_ip_black 
55,64d65
<     match_ip = *(u_long *) (ip->ip_src);
<     s_ip.s_addr = match_ip;
<     strcpy(s_ip_buf, inet_ntoa(s_ip));
< 
< 	if (g_stCacheServer.nValueNum != 0) {
< 		for (i = 0; i < g_stCacheServer.nValueNum; i++) {
< 			if (compare_ip(g_stCacheServer.pszValue[i], (u_int) match_ip) == 0)
< 				return;
< 		}
< 	}
66,73c67
<     if (g_stSrcIpBlack.nValueNum != 0)
<     {
<         for (i = 0; i < g_stSrcIpBlack.nValueNum; i++)
<         {
<             if (compare_ip(g_stSrcIpBlack.pszValue[i], (int) match_ip) == 0)
<                 return;
<         }
<     }
---
>     //src_ip_white and src_ip_black 
75,84c69,90
<     if (g_stSrcIpWhite.nValueNum != 0)
<     {
<         for (j = 0; j < g_stSrcIpWhite.nValueNum; j++)
<         {
<             if (compare_ip(g_stSrcIpWhite.pszValue[j], (int) match_ip) != 0)
<                 continue;
<             else
<                 break;
<         }
<         if (j == g_stSrcIpWhite.nValueNum)
---
>      match_ip = *(u_long *)(ip->ip_src);
>      s_ip.s_addr = match_ip;
>      strcpy(s_ip_buf, inet_ntoa(s_ip));
> 
>  
>  
>      if(now_count_ip_black  != 0){
>      for(i = 0; i < now_count_ip_black; i++){
>          if(compare_ip(src_ip_black[i].string,(int)match_ip) == 0)
>              return;
>      }
>      }
>  
>  
>      if(now_count_ip_white != 0){
>      for(j = 0; j < now_count_ip_white; j++){
>          if(compare_ip(src_ip_white[j].string,(int)match_ip) != 0)
>              continue ;
>          else
>             break;
>      }
>      if(j == now_count_ip_white)
86c92,107
<     }
---
>      }
> 
>  
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
89,90c110,113
<     point = (char *) tcp;
<     point = point + 20;
---
>     point = (char *)tcp;
>     point= point + 20;
> 
>     memset(http_host , 0 ,100);
92d114
<     memset(http_host, 0, 100);
95,96c117,118
<     if (strcpy_head(request_line, point, i, "/") == NULL)
<     {
---
>    if(strcpy_head(request_line, point, i ,"/") == NULL)
>    {
99c121,124
<     }
---
>    }
> 
>   // printf("the requst_line is %s\n", request_line);
> 
101d125
<     //CMN_LOG(MY_LOG_DEBUG, "the requst_line is %s\n", request_line);
104c128
<     if (delete_http_version(request_line) == -1)
---
>     if(delete_http_version(request_line) == -1)
109c133,134
<     if (strlen(request_line) == 0)
---
> 
>     if(strlen(request_line) == 0)
111a137
> 
114,115c140,143
<     if (pre_file_name_check(file_name, request_line, strlen(request_line)) == -1)
<         return;
---
>     if(pre_file_name_check(file_name, request_line , strlen(request_line)) == -1 )
>         return ;
> 
>   // printf("the file_name is %s\n",file_name);
117d144
<     // printf("the file_name is %s\n",file_name);
120c147
<     if (strcpy_head(http_host, point, i, "Host: ") == NULL)
---
>     if(strcpy_head(http_host, point, i ,"Host: ") == NULL)
123c150
<         return;
---
>         return ;
124a152,158
> 
>    //printf("the HTTP host is %s\n",http_host); 
> 
> 
> 
> 
> 
126d159
<     //printf("the HTTP host is %s\n",http_host);
128,133c161,164
< #if 0
<     strcat(request, "File: ");
<     strcat(request, file_name);
<     strcat(request,"\r\nHost: ");
<     strcat(request,http_host);
< #endif
---
>    strcat(request, "File: ");
>    strcat(request, file_name);
>    strcat(request,"\r\nHost: ");
>    strcat(request,http_host);
136,137d166
<     strcat(request, "Host: ");
<     strcat(request, http_host);
139,140d167
<     CMN_LOG(MY_LOG_DEBUG,"the file name is %s\n",file_name);
<     CMN_LOG(MY_LOG_DEBUG,"the host is %s\n",request);
142,145d168
<     strcat(request_line_temp, "/");
<     strcat(request_line_temp, request_line);
<     
<     CMN_LOG(MY_LOG_DEBUG,"the request_line is %s\n",request_line_temp);
147,153d169
<     // add for cache server, if
< 	if (g_stCacheServer.nValueNum != 0) {
< 		for (i = 0; i < g_stCacheServer.nValueNum; i++) {
< 			if (compare_ip(g_stCacheServer.pszValue[i], inet_addr(request)) == 0)
< 				return;
< 		}
< 	}
155,156d170
<     if (file_compare_http_host(request, BLACK_HANDLE, NULL, NULL) < 0)
<     {
158c172,177
<         if ((pmatch_eo = file_compare_http_host(request, WHITE_HANDLE, request_line_temp, file_name)) >= 0)
---
> 
>     
>    if(file_compare_http_host(request, BLACK_HANDLE , NULL) < 0)
>    {
> 
>      if((pmatch_eo = file_compare_http_host(request , WHITE_HANDLE , request_line)) >= 0)
161,168c180,194
<             /*ketama_select_server is used to choose cache_ip ,according to the url
<              *the assemble_url is used  to get the url message
<              */
< 
<             //��ȡ�������ַ�ǰ����Ϣ������ݣ������Ϣ���ж��Ƿ���ӣ����Ŀ¼������µģ���졣
<             //���أ���˵��������ǣ�𣬷�������������
<             //1. add_dir_host =  assemble_url(url,request_line,http_host);
<             //       printf("the url is %s\n",url);
---
> 
> 
>     /*ketama_select_server is used to choose cache_ip ,according to the url
>     *the assemble_url is used  to get the url message
>     */
> 
> 
> 
>            //��ȡ�������ַ�ǰ����Ϣ������ݣ������Ϣ���ж��Ƿ���ӣ����Ŀ¼������µģ���졣 
>            //���أ���˵��������ǣ�𣬷�������������
> 
>            //1. add_dir_host =  assemble_url(url,request_line,http_host);
> 
>      //       printf("the url is %s\n",url);
> 
170,171c196,200
<             //  2. ketama_select_server(cache_ip,path_server_ip,url,http_host);
<             srand((unsigned) time(NULL));
---
>          //  2. ketama_select_server(cache_ip,path_server_ip,url,http_host);
> 
>           srand((unsigned )time(NULL));
> 
>          strcpy(cache_ip,server_ip[rand()%now_count_server_ip].string);
173d201
<             strcpy(cache_ip, g_stCacheServer.pszValue[rand() % g_stCacheServer.nValueNum]);
175c203,204
<             //    printf("before request_line is %s\n",request_line);
---
>     //    printf("before request_line is %s\n",request_line);
> 
179,196c208,212
<             // if(add_dir_host == 1) //the http host is ip
<             // sprintf(send_message,"HTTP/1.1 302 Found\r\nLocation: http://%s/%s\r\n\r\n",cache_ip,http_host,request_line);
<             // else
< 
<             if (CONFIG_CACHE_SERVER_PORT == 80)
<                 sprintf(send_message, "HTTP/1.1 302 Found\r\nLocation: http://%s/%s/%s/%s\r\n\r\n", cache_ip, http_host, CONFIG_CACHE_SERVER_FLAG, request_line);
<             else
<                 sprintf(send_message, "HTTP/1.1 302 Found\r\nLocation: http://%s:%d/%s/%s/%s\r\n\r\n", cache_ip, CONFIG_CACHE_SERVER_PORT, http_host, CONFIG_CACHE_SERVER_FLAG, request_line);
< 
<             get_sys_time(sys_time);
< 
<             if (CONFIG_CACHE_SERVER_PORT == 80)
<                 fprintf(fp_out, "%s %s %02d %s http://%s/%s http://%s/%s/%s/%s\n", "I", sys_time, 2, s_ip_buf, http_host, request_line, cache_ip, http_host, CONFIG_CACHE_SERVER_FLAG, request_line);
<             else
<                 fprintf(fp_out, "%s %s %02d %s http://%s/%s http://%s:%d/%s/%s/%s\n", "I", sys_time, 2, s_ip_buf, http_host, request_line, cache_ip, CONFIG_CACHE_SERVER_PORT, http_host,
<                         CONFIG_CACHE_SERVER_FLAG, request_line);
<             fflush(fp_out);
<             //CMN_LOG(MY_LOG_DEBUG, "%s %s %02d %s http://%s/%s http://%s/%s/%s/%s\n","I",sys_time,2 ,s_ip_buf,  http_host,  request_line,  cache_ip,  http_host, insert_name, request_line);
---
>            // if(add_dir_host == 1) //the http host is ip
>            // sprintf(send_message,"HTTP/1.1 302 Found\r\nLocation: http://%s/%s\r\n\r\n",cache_ip,http_host,request_line); 
>            // else
>             sprintf(send_message,"HTTP/1.1 302 Found\r\nLocation: http://%s:8080/%s/%s/%s\r\n\r\n",cache_ip,http_host,insert_name,request_line); 
> 
198,199c214,217
<             if (CONFIG_REDIRECTOR_SWITCH == REDIRECTOR_OFF) //0:only print message
<                 return;
---
>     get_sys_time(sys_time);
>     fprintf(fp_out, "%s %s %02d %s http://%s/%s http://%s/%s/%s/%s\n","I",sys_time,2 ,s_ip_buf,  http_host,  request_line,  cache_ip,  http_host, insert_name, request_line);
>     fflush(fp_out);
>     //CMN_LOG(MY_LOG_DEBUG, "%s %s %02d %s http://%s/%s http://%s/%s/%s/%s\n","I",sys_time,2 ,s_ip_buf,  http_host,  request_line,  cache_ip,  http_host, insert_name, request_line);
200a219
>     
203,227c222,253
<             /*
<              *create the parameter
<              */
<             u_long src_ip = 0;
<             u_long dst_ip = 0;
<             u_short src_prt = 0;
<             u_short dst_prt = 0;
<             char *payload = NULL;
<             u_short payload_s = 0;
<             libnet_ptag_t t;
<             libnet_t *e = NULL;
<             u_int ack;
< 
<             /*
<              *combine the packet for sending
<              */
< 
<             e = libnet_init(
<             LIBNET_LINK, pszDevName, errbuf);
< 
<             if (e == NULL)
<             {
<                 fprintf(stderr, "libnet_init() failed : %s", errbuf);
<                 exit(1);
<             }
---
>     /*
>     *create the parameter 
>     */
>     u_long src_ip = 0;
>     u_long dst_ip = 0;
>     u_short src_prt = 0;
>     u_short dst_prt = 0;
>     char *payload = NULL;
>     u_short payload_s = 0;
>     libnet_ptag_t t;
>     libnet_t *e = NULL;
>     u_char enet_dst[6];
>     u_char enet_src[6];
>     u_int ack;
> 
> 
>     /*
>     *combine the packet for sending 
>     */
> 
>     e = libnet_init(
>         LIBNET_LINK,
>         dev_name,
>         errbuf
>     );
> 
>     if(e == NULL)
>     {
>         fprintf(stderr,"libnet_init() failed : %s", errbuf);
>         exit(1);
>     }
> 
230,240c256,268
<             t = libnet_build_tcp_options(
<                     "\003\003\012\001\002\004\001\011\010\012\077\077\077\077\000\000\000\000\000\000",
<                     0x14,
<                     e,
<                     0);
< 
<             if(t == -1)
<             {
<                 fprintf(stderr, "Can't built TCP option: %s\n",libnet_geterror(e));
<                 exit(1);
<             }
---
>     t = libnet_build_tcp_options(
>     "\003\003\012\001\002\004\001\011\010\012\077\077\077\077\000\000\000\000\000\000",
>     0x14,
>     e,
>     0);
> 
> 
> 
>     if(t == -1)
>     {
>         fprintf(stderr, "Can't built TCP option: %s\n",libnet_geterror(e));
>         exit(1);
>     }
244,290d271
<             /*set tcp header value*/
<             payload = send_message;
<             payload_s = strlen(payload);
<             src_prt = ntohs(tcp->th_dport);
<             dst_prt = ntohs(tcp->th_sport);
< 
<             ack = ntohl(tcp->th_seq) + ntohs(ip->ip_len) - 0x28/* - 12*/; //why add 12??
< 
<             t = libnet_build_tcp(src_prt, dst_prt, ntohl(tcp->th_ack), /*sequence number*/
<             ack, /*acknowlegement number */
<             //  TH_SYN,        /*control flags */
<                     TH_ACK + TH_PUSH, 32767, /*windows size*/
<                     0, /*checksum*/
<                     0, /*urgent pointer*/
<                     LIBNET_TCP_H + payload_s, /*TCP PACKET SIZE*/
<                     payload, payload_s, e, 0);
< 
<             if (t == -1)
<             {
<                 fprintf(stderr, "Can't not build TCP header:%s\n", libnet_geterror(e));
<                 exit(1);
<             }
< 
<             /*set ip header value*/
<             src_ip = *(u_long *) (ip->ip_dst);
<             dst_ip = *(u_long *) (ip->ip_src);
< 
<             t = libnet_build_ipv4(
<             LIBNET_IPV4_H + LIBNET_TCP_H + payload_s, /*length*/
<             0, /*TOS*/
<             242, /*IP ID*/
<             0x00, /*IP Frag*/
<             64, /*TTL*/
<             IPPROTO_TCP, /*PROTOCAL*/
<             0, /* checksum */
<             src_ip, /* source IP */
<             dst_ip, /* destination IP */
<             NULL, /* payload */
<             0, /* payload size */
<             e, /* libnet handle */
<             0); /* libnet id */
< 
<             if (t == -1)
<             {
<                 fprintf(stderr, "Can't build IP header: %s\n", libnet_geterror(e));
<                 exit(1);
<             }
292c273,339
<             /*write data int ether*/
---
>     /*set tcp header value*/
>     payload = send_message;
>     payload_s = strlen(payload);
>     src_prt = ntohs(tcp->th_dport);
>     dst_prt = ntohs(tcp->th_sport);
> 
>     ack =ntohl(tcp->th_seq) + ntohs(ip->ip_len) - 0x28;//why add 12??
> 
> 
> 
> 
> 
>     t = libnet_build_tcp(
>         src_prt,
>         dst_prt,
>         ntohl(tcp->th_ack),   /*sequence number*/
>         ack,   /*acknowlegement number */
>       //  TH_SYN,        /*control flags */
>         TH_ACK + TH_PUSH,
>         32767,          /*windows size*/
>         0,              /*checksum*/
>         0,             /*urgent pointer*/
>         LIBNET_TCP_H  +  payload_s,  /*TCP PACKET SIZE*/
>         payload,
>         payload_s,
>         e,
>         0);
> 
> 
>      if(t == -1)
>      {
>         fprintf(stderr, "Can't not build TCP header:%s\n",libnet_geterror(e));
>         exit(1);
>      }
> 
> 
>      /*set ip header value*/
>      src_ip = *(u_long *)(ip->ip_dst); 
>      dst_ip = *(u_long *)(ip->ip_src);
>      
> 
> 
>      t = libnet_build_ipv4(
>         LIBNET_IPV4_H + LIBNET_TCP_H  + payload_s, /*length*/
>         0,      /*TOS*/
>         242,    /*IP ID*/
>         0x00,      /*IP Frag*/
>         64,        /*TTL*/
>         IPPROTO_TCP, /*PROTOCAL*/
>         0,                                          /* checksum */
>         src_ip,                                     /* source IP */
>         dst_ip,                                     /* destination IP */
>         NULL,                                       /* payload */
>         0,                                          /* payload size */
>         e,                                          /* libnet handle */
>         0);                                         /* libnet id */
> 
> 
>     if(t == -1)
>     {
>         fprintf(stderr, "Can't build IP header: %s\n",libnet_geterror(e));
>         exit(1);
>     }
> 
> 
> 
>     /*write data int ether*/
294,318c341
<             //  memcpy(enet_src, eth->ether_dhost, 6);
<             t = libnet_build_ethernet(eth->ether_shost, eth->ether_dhost,
<             ETHERTYPE_IP,
<             NULL, /*payload */
<             0, /*payload size*/
<             e, /*libnet handle*/
<             0); /*libnet id*/
< 
<             if (t == -1)
<             {
<                 fprintf(stderr, "Can't build ether header :%s\n", libnet_geterror(e));
<                 exit(1);
<             }
< 
<             /*write it */
< 
<             int c = 0;
< 
<             c = libnet_write(e);
<             if (c == -1)
<             {
<                 fprintf(stderr, "Write error: %s\n", libnet_geterror(e));
<                 exit(1);
<             }
<             //  fprintf(stderr, "write %d byte TCP packet\n",c);
---
>   //  memcpy(enet_src, eth->ether_dhost, 6);
320c343,350
<             libnet_destroy(e);
---
>     t = libnet_build_ethernet(
>         eth->ether_shost,
>         eth->ether_dhost,
>         ETHERTYPE_IP,
>         NULL,       /*payload */
>         0,          /*payload size*/
>         e,          /*libnet handle*/
>         0);         /*libnet id*/
322d351
< #endif
323a353,356
>         if(t == -1)
>         {
>             fprintf(stderr, "Can't build ether header :%s\n", libnet_geterror(e));
>             exit(1);
326c359,381
<     }
---
>         /*write it */
> 
>         int c = 0;
> 
>         c = libnet_write(e);
>         if(c  == -1)
>         {
>             fprintf(stderr, "Write error: %s\n", libnet_geterror(e));
>             exit(1);
>         }
>           //  fprintf(stderr, "write %d byte TCP packet\n",c);
> 
> 
>         libnet_destroy(e);
> 
> 
> #endif
> 
>          }
> 
>    }
> 
> 
329a385
> 
