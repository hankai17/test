#include"spider_ip.hh"
#include"tb.hh"
//#include"ipcn.hh"
#include"ip138.hh"
#include<thread>
#include<vector>
#include<chrono>
#include<fcntl.h>
#include<stdlib.h>
#include<unistd.h>

//std::vector<std::thread> threads;
std::vector<std::string> ip_b;
std::vector<std::string> ip_e;

void DoBussiness(spider_ip* spider)
{
    spider->make_spider();
    delete spider;
}

void test()
{
    //threads.push_back(std::thread(DoBussiness(new tb_spider_ip("1.0.8.0","1.0.15.255"))));
    //threads.push_back(std::thread(DoBussiness(new ipcn_spider_ip("1.0.8.0","1.0.15.255"))));
    //threads.push_back(std::thread(DoBussiness(new ip138_spider_ip("1.0.8.0","1.0.15.255"))));
    //DoBussiness(new tb_spider_ip("100.0.0.0","101.0.0.0"));  //淘宝的ip库不准确
    //DoBussiness(new ipcn_spider_ip("1.0.8.0","1.0.15.255"));
    /*
    for(int i = 0; i < 100; i++)
    {
        std::cout<<"begin="<<ip_b[i]<<std::endl;
        std::cout<<"end="<<ip_e[i]<<std::endl;
        DoBussiness(new ip138_spider_ip(ip_b[i],ip_e[i]));
    }
    */
    DoBussiness(new ip138_spider_ip(ip_b[0],ip_e[0]));

/*
    spider_ip* s1 = new tb_spider_ip("1.0.8.0","1.0.15.255");
    std::thread t1(DoBussiness,s1);

    spider_ip* s2 = new ipcn_spider_ip("1.0.8.0","1.0.15.255");
    std::thread t2(DoBussiness,s2);

    spider_ip* s3 = new ip138_spider_ip("1.0.8.0","1.0.15.255");
    std::thread t3(DoBussiness,s3);

    t1.join();
    t2.join();
    t3.join();
*/
    //sleep(1);
}

int main()
{
    int ip[][8] = 
    { 
        { 1, 12, 0, 0, 1, 15, 255, 255 },  //1-1 . 12-15 . 0-255 . 0-255
        { 1, 24, 0, 0, 1, 31, 255, 255 },  //1-1 . 24-31 . 0-255 . 0-255
        { 27, 8, 0, 0, 27, 31, 255, 255 },
        { 27, 36, 0, 0, 27, 47, 255, 255 },
        { 27, 50, 128, 0, 27, 50, 255, 255 },
        { 27, 54, 192, 0, 27, 54, 255, 255 },
        { 27, 128, 0, 0, 27, 129, 255, 255 },
        { 27, 144, 0, 0, 27, 144, 255, 255 },
        { 27, 148, 0, 0, 27, 159, 255, 255 },
        { 27, 184, 0, 0, 27, 227, 255, 255 },
        { 58, 14, 0, 0, 58, 25, 255, 255 },
        { 58, 30, 0, 0, 58, 63, 255, 255 },
        { 58, 66, 0, 0, 58, 67, 255, 255 },
        { 58, 68, 128, 0, 58, 68, 255, 255 },
        { 58, 82, 0, 0, 58, 83, 255, 255 },
        { 58, 87, 64, 0, 58, 87, 127, 255 },
        { 58, 99, 128, 0, 58, 101, 255, 255 },
        { 58, 116, 0, 0, 58, 119, 255, 255 },
        { 58, 128, 0, 0, 58, 135, 255, 255 },
        { 58, 144, 0, 0, 58, 144, 255, 255 },
        { 58, 154, 0, 0, 58, 155, 255, 255 },
        { 58, 192, 0, 0, 58, 223, 255, 255 },
        { 58, 240, 0, 0, 58, 255, 255, 255 },
        { 59, 32, 0, 0, 59, 83, 255, 255 },
        { 59, 107, 0, 0, 59, 111, 255, 255 },
        { 59, 151, 0, 0, 59, 151, 127, 255 },
        { 59, 155, 0, 0, 59, 155, 255, 255 },
        { 59, 172, 0, 0, 59, 175, 255, 255 },
        { 59, 191, 0, 0, 59, 255, 255, 255 },
        { 60, 0, 0, 0, 60, 31, 255, 255 },
        { 60, 55, 0, 0, 60, 55, 255, 255 },
        { 60, 63, 0, 0, 60, 63, 255, 255 },
        { 60, 160, 0, 0, 60, 191, 255, 255 },
        { 60, 194, 0, 0, 60, 195, 255, 255 },
        { 60, 200, 0, 0, 60, 223, 255, 255 },
        { 60, 232, 0, 0, 60, 233, 255, 255 },
        { 60, 235, 0, 0, 60, 235, 255, 255 },
        { 60, 245, 128, 0, 60, 245, 255, 255 },
        { 60, 247, 0, 0, 60, 247, 255, 255 },
        { 60, 252, 0, 0, 60, 252, 255, 255 },
        { 60, 253, 128, 0, 60, 253, 255, 255 },
        { 60, 255, 0, 0, 60, 255, 255, 255 },
        { 61, 4, 80, 0, 61, 4, 95, 255 },
        { 61, 4, 176, 0, 61, 4, 191, 255 },
        { 61, 8, 160, 0, 61, 8, 175, 255 },
        { 61, 28, 0, 0, 61, 28, 127, 255 },
        { 61, 29, 128, 0, 61, 29, 255, 255 },
        { 61, 45, 128, 0, 61, 45, 191, 255 },
        { 61, 47, 128, 0, 61, 47, 191, 255 },
        { 61, 48, 0, 0, 61, 55, 255, 255 },
        { 61, 87, 192, 0, 61, 87, 255, 255 },
        { 61, 128, 0, 0, 61, 191, 255, 255 },
        { 61, 232, 0, 0, 61, 237, 255, 255 },
        { 61, 240, 0, 0, 61, 243, 255, 255 },
        { 110, 6, 0, 0, 110, 7, 255, 255 },
        { 110, 16, 0, 0, 110, 19, 255, 255 },
        { 110, 40, 0, 0, 110, 43, 255, 255 },
        { 110, 48, 0, 0, 110, 48, 255, 255 },
        { 110, 51, 0, 0, 110, 53, 255, 255 },
        { 110, 56, 0, 0, 110, 65, 255, 255 },
        { 110, 72, 0, 0, 110, 73, 255, 255 },
        { 110, 75, 0, 0, 110, 76, 63, 255 },
        { 110, 76, 192, 0, 110, 77, 127, 255 },
        { 110, 80, 0, 0, 110, 91, 255, 255 },
        { 110, 94, 0, 0, 110, 127, 255, 255 },
        { 110, 152, 0, 0, 110, 157, 255, 255 },
        { 110, 166, 0, 0, 110, 167, 255, 255 },
        { 110, 172, 192, 0, 110, 173, 47, 255 },
        { 110, 173, 64, 0, 110, 173, 127, 255 },
        { 110, 173, 192, 0, 110, 173, 223, 255 },
        { 110, 176, 0, 0, 110, 223, 255, 255 },
        { 110, 228, 0, 0, 110, 231, 255, 255 },
        { 110, 232, 32, 0, 110, 232, 63, 255 },
        { 110, 236, 0, 0, 110, 237, 255, 255 },
        { 110, 240, 0, 0, 110, 255, 255, 255 },
        { 111, 0, 0, 0, 111, 63, 255, 255 },
        { 111, 66, 0, 0, 111, 66, 255, 255 },
        { 111, 67, 192, 0, 111, 67, 207, 255 },
        { 111, 68, 64, 0, 111, 68, 95, 255 },
        { 111, 72, 0, 0, 111, 79, 255, 255 },
        { 111, 85, 0, 0, 111, 85, 255, 255 },
        { 111, 91, 192, 0, 111, 91, 223, 255 },
        { 111, 112, 0, 0, 111, 117, 255, 255 },
        { 111, 119, 64, 0, 111, 119, 159, 255 },
        { 111, 120, 0, 0, 111, 124, 255, 255 },
        { 111, 126, 0, 0, 111, 167, 255, 255 },
        { 111, 170, 0, 0, 111, 170, 255, 255 },
        { 111, 172, 0, 0, 111, 183, 255, 255 },
        { 111, 186, 0, 0, 111, 187, 255, 255 },
        { 111, 192, 0, 0, 111, 215, 255, 255 },
        { 111, 221, 128, 0, 111, 222, 255, 255 },
        { 111, 223, 240, 0, 111, 223, 243, 255 },
        { 111, 223, 248, 0, 111, 223, 251, 255 },
        { 111, 224, 0, 0, 111, 231, 255, 255 },
        { 111, 235, 96, 0, 111, 235, 127, 255 },
        { 111, 235, 160, 0, 111, 235, 191, 255 },
        { 112, 0, 0, 0, 112, 67, 255, 255 },
        { 112, 73, 0, 0, 112, 75, 255, 255 },
        { 112, 80, 0, 0, 112, 87, 255, 255 },
        { 112, 109, 128, 0, 112, 109, 255, 255 } 
    };
    char str_ip_begin[16] = {0};
    char str_ip_end[16] = {0};

    for (int m = 0; m < 100; m++)
    {
        sprintf( str_ip_begin,"%d.%d.%d.%d",ip[m][0],ip[m][1],ip[m][2],ip[m][3]);
        sprintf( str_ip_end,"%d.%d.%d.%d",ip[m][4],ip[m][5],ip[m][6],ip[m][7]);

        std::string ip_begin = str_ip_begin;
        std::string ip_end = str_ip_end;

        ip_b.push_back(ip_begin);
        ip_e.push_back(ip_end);

        memset(str_ip_begin,0,16);
        memset(str_ip_end,0,16);
    } 
    std::cout<<"ip_b.size="<<ip_b.size()<<std::endl;
    std::cout<<"ip_e.size="<<ip_e.size()<<std::endl;

    test();
    return 0;
}

